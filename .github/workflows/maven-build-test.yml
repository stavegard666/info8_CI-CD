name: Maven Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      maven_exit_code: ${{ steps.run-tests.outputs.maven_exit_code }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Build with Maven (skip tests)
      run: mvn clean package -DskipTests
    
    - name: Upload JAR files
      uses: actions/upload-artifact@v4
      with:
        name: jar-files
        path: |
          **/target/*.jar
          !**/target/lib/*.jar
          !**/target/original-*.jar
    
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-files
        path: app-jars
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image with JARs
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: app-runner:latest
        build-args: |
          JARS_DIR=app-jars
        outputs: type=docker,dest=/tmp/app-runner.tar
        file: .github/workflows/docker/Dockerfile
    
    - name: Install Kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
    
    - name: Generate Kubernetes manifests
      run: |
        mkdir -p k8s-deploy/base
        
        # Create deployment manifest
        cat > k8s-deploy/base/deployment.yaml << 'EOF'
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: app-runner
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: app-runner
          template:
            metadata:
              labels:
                app: app-runner
            spec:
              containers:
              - name: app-runner
                image: app-runner:latest
                imagePullPolicy: IfNotPresent
        EOF
        
        # Create kustomization file
        cat > k8s-deploy/base/kustomization.yaml << 'EOF'
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization
        resources:
        - deployment.yaml
        EOF
        
        # Generate final manifests
        mkdir -p k8s-deploy/output
        kustomize build k8s-deploy/base > k8s-deploy/output/kubernetes-manifests.yaml
    
    - name: Upload Kubernetes manifests
      uses: actions/upload-artifact@v4
      with:
        name: kubernetes-manifests
        path: k8s-deploy/output
    
    - name: Create launcher script for Linux
      run: |
        mkdir -p deb-build/input
        mkdir -p deb-build/input/jars
        
        # Create a shell script that will run all the JAR files
        cat > deb-build/input/run-all-jars.sh << 'EOF'
        #!/bin/bash
        echo "Running all JAR files..."
        for jar in $(find $(dirname "$0")/jars -name "*.jar"); do
          echo "Running $jar"
          java -jar "$jar" &
        done
        echo "All JARs are running!"
        wait
        EOF
        
        chmod +x deb-build/input/run-all-jars.sh
        cp -r app-jars/**/*.jar deb-build/input/jars/ || true
        
    - name: Create Debian package with jpackage
      run: |
        mkdir -p deb-build/output
        jpackage --type deb \
          --name "JarRunner" \
          --app-version "1.0.0" \
          --vendor "MyCompany" \
          --input deb-build/input \
          --dest deb-build/output \
          --main-jar run-all-jars.sh \
          --linux-app-category "development" \
          --linux-shortcut
          
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: deb-build/output/*.deb
    
    - name: Run Maven with tests
      id: run-tests
      continue-on-error: true
      run: |
        mvn clean package
        echo "maven_exit_code=$?" >> $GITHUB_OUTPUT
      
  create-exes:
    needs: build
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK with jpackage
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Download JAR artifacts
      uses: actions/download-artifact@v4
      with:
        name: jar-files
        path: app-jars
        
    - name: Install WiX Toolset
      run: |
        choco install wixtoolset -y
        echo "C:\Program Files (x86)\WiX Toolset v3.11\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
    
    - name: Create Java launcher for Windows
      shell: powershell
      run: |
        # Create directory structure
        mkdir -p executable-build/launcher/src/main/java/com/mycompany
        mkdir -p executable-build/input/jars
        
        # Create Java launcher program
        @"
package com.mycompany;

import java.io.File;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;

public class JarLauncher {
    public static void main(String[] args) {
        try {
            System.out.println("Starting JAR runner...");
            
            // Get application directory
            String appDir = System.getProperty("app.dir");
            if (appDir == null) {
                appDir = new File(JarLauncher.class.getProtectionDomain()
                    .getCodeSource().getLocation().toURI()).getParent();
            }
            
            System.out.println("Application directory: " + appDir);
            
            // Find and run all JAR files
            File jarsDir = new File(appDir + File.separator + "jars");
            if (jarsDir.exists() && jarsDir.isDirectory()) {
                System.out.println("Found jars directory: " + jarsDir.getAbsolutePath());
                findAndRunJars(jarsDir);
            } else {
                System.err.println("Jars directory not found at: " + jarsDir.getAbsolutePath());
            }
            
            System.out.println("All JARs have been started!");
            
            // Keep the application running
            Thread.sleep(Long.MAX_VALUE);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private static void findAndRunJars(File directory) throws IOException {
        File[] files = directory.listFiles();
        if (files != null) {
            for (File file : files) {
                if (file.isDirectory()) {
                    findAndRunJars(file);
                } else if (file.getName().toLowerCase().endsWith(".jar")) {
                    runJar(file.getAbsolutePath());
                }
            }
        }
    }
    
    private static void runJar(String jarPath) throws IOException {
        System.out.println("Running JAR: " + jarPath);
        ProcessBuilder pb = new ProcessBuilder(
            "java", "-jar", jarPath
        );
        pb.inheritIO();
        Process process = pb.start();
    }
}
"@ | Out-File -FilePath executable-build/launcher/src/main/java/com/mycompany/JarLauncher.java -Encoding utf8
        
        # Compile the Java file
        $env:JAVA_HOME = "${{ env.JAVA_HOME }}"
        javac executable-build/launcher/src/main/java/com/mycompany/JarLauncher.java
        
        # Create manifest file
        @"
Manifest-Version: 1.0
Main-Class: com.mycompany.JarLauncher
"@ | Out-File -FilePath executable-build/launcher/MANIFEST.MF -Encoding ascii
        
        # Create JAR file
        Push-Location executable-build/launcher
        jar cvfm launcher.jar MANIFEST.MF src/main/java/com/mycompany/JarLauncher.class
        Pop-Location
        
        # Copy files to input directory
        Copy-Item -Path executable-build/launcher/launcher.jar -Destination executable-build/input/
        Copy-Item -Path app-jars/**/*.jar -Destination executable-build/input/jars/ -Recurse
    
    - name: Create Windows executable with jpackage
      shell: powershell
      run: |
        jpackage --type app-image `
          --name "JarRunner" `
          --dest executable-build/output `
          --input executable-build/input `
          --main-jar launcher.jar `
          --win-console `
          --app-version 1.0.0 `
          --vendor "MyCompany"
          
        # Create a zip file with the executable
        Compress-Archive -Path executable-build/output/* -DestinationPath executable-build/JarRunner.zip
    
    - name: Create EXE installer with jpackage
      shell: powershell
      run: |
        jpackage --type exe `
          --name "JarRunner" `
          --app-version 1.0.0 `
          --vendor "MyCompany" `
          --input executable-build/input `
          --dest executable-build/installer `
          --main-jar launcher.jar `
          --win-console `
          --win-dir-chooser `
          --win-shortcut
    
    - name: Upload Windows executables
      uses: actions/upload-artifact@v4
      with:
        name: windows-executables
        path: |
          executable-build/output
          executable-build/JarRunner.zip
          executable-build/installer/*.exe
          
    - name: Check test results
      if: always()
      shell: bash
      run: |
        if [ "${{ needs.build.outputs.maven_exit_code }}" != "0" ]; then
          echo "::error::Run Maven with tests failed with exit code ${{ needs.build.outputs.maven_exit_code }}"
          exit 1
        else
          echo "All Maven tests passed successfully!"
        fi
